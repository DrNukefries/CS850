mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,960)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 3000 # approximate basic period of tides is 1500 minutes
N = 5
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,960)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 3000 # approximate basic period of tides is 1500 minutes
N = 3
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,960)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 3000 # approximate basic period of tides is 1500 minutes
N = 10
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,960)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
tides_medium3 <- head(tides,8*240)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 3000 # approximate basic period of tides is 1500 minutes
N = 10
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fit_fourier <- lm(tides_medium2$`Verified (m)` ~ fmat_medium2)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted_f), color = "red",
linetype = "dashed")
P <- 1500 * 7 # approximate basic period of tides is 1500 minutes
N = 10 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
P <- 1500 * 7 # approximate basic period of tides is 1500 minutes
N = 30 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium2)
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted_f), color = "red",
linetype = "dashed")
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1500 * 7 # approximate basic period of tides is 1500 minutes
N = 50 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1500 * 7 # approximate basic period of tides is 1500 minutes
N = 100 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
200000/1500
''
20000/1500
P <- 1500 * 14 # approximate basic period of tides is 1500 minutes
N = 100 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted_f), color = "red",
linetype = "dashed")
24*60+50
P <- 1490 * 14 # approximate basic period of tides is 1490 minutes
N = 100 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted_f), color = "red",
linetype = "dashed")
P <- 1490 * 14 # approximate basic period of tides is 1490 minutes
N = 20 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1490 # basic period of tides is 1490 minutes
N = 20 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1490 * 29 # basic period of tides is 1490 minutes
N = 20 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1490 * 29 # basic period of tides is 1490 minutes
N = 20 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
P <- 1490 * 29 # basic period of tides is 1490 minutes
N = 20 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
fit_fourier
P <- 1490 * 29 # basic period of tides is 1490 minutes
N = 100 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
P <- 1490 * 7 # basic period of tides is 1490 minutes
N = 100 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
P <- 1490 * 7 # basic period of tides is 1490 minutes
N = 15 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
P <- 1490 * 7 # basic period of tides is 1490 minutes
N = 15 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted_f), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides %>% mutate(Pred = tides_predicted_f) %>% filter(Minute > 30000), aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides %>% mutate(Pred = tides_predicted_f) %>% filter(Minute > 30000), aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=Pred), color = "red",
linetype = "dashed")
P <- 1490 # basic period of tides is 1490 minutes
N = 15 # number of features to generate
fourier_features <- function(N, P, data){
f.sin <- function(n, P, x){sin(2*pi*n*x/P)}
f.cos <- function(n, P, x){cos(2*pi*n*x/P)}
mat.sin <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.sin(n,P,data)})))
mat.cos <- as.matrix(bind_cols(lapply(seq(1,N),
function(n){f.cos(n,P,data)})))
mat.both <- cbind(mat.sin, mat.cos)
colnames(mat.both) <- NULL
mat.both
}
fmat_medium2 <- fourier_features(N, P, tides_medium2$Minute)
ggplot(fmat_medium2 %>% melt(varnames=c("Minute","Function")) %>%
filter(Function < 6),
aes(x=Minute,y=value,group=Function)) + geom_line()
tides_medium3 <- head(tides,15*240)
fmat_medium3 <- fourier_features(N, P, tides_medium3$Minute)
fit_fourier <- lm(tides_medium3$`Verified (m)` ~ fmat_medium3)
tides_predicted3 <-
fmat_medium3 %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides_medium3, aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=tides_predicted3), color = "red",
linetype = "dashed")
fmat_all <- fourier_features(N, P, tides$Minute)
# compute the prodiction by multipling feature matrix
tides_predicted_f <-
fmat_all %*% tail(fit_fourier$coefficients,-1) + fit_fourier$coefficients[1]
ggplot(tides %>% mutate(Pred = tides_predicted_f) %>% filter(Minute > 30000), aes(x=Minute,y=`Verified (m)`)) + geom_line() +
geom_line(aes(y=Pred), color = "red",
linetype = "dashed")
